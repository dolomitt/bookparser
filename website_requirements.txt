# Website Requirements Document - Updated

## Overview
The Bookparser website is a comprehensive Japanese reading assistant that helps users read Japanese books with advanced language learning support. The application provides morphological analysis, dictionary lookups, AI-powered translations, and text-to-speech functionality to enhance the Japanese reading experience.

## Functional Requirements

### 1. Main Page (Book Library)
1.1. **Book Collection Display**
   - Users can view a list of all processed books in their library
   - Books are displayed with metadata (title, processing status, last accessed)
   - Support for both original text files and enhanced .book format files

1.2. **Book Access**
   - Users can click on any book to access its reading interface
   - Reading progress is automatically restored from previous sessions
   - Books maintain processing state and user annotations

1.3. **Import Queue Management**
   - Users can see the list of files currently in the import queue
   - Direct access to import processing from the main page
   - Status indicators for import progress

### 2. Reading Page (Enhanced Reading Experience)
2.1. **Interactive Text Display**
   - Users can read Japanese books on mobile phones and desktop browsers
   - Text is displayed with proper formatting and line breaks
   - Support for both processed and raw text content

2.2. **Language Learning Features**
   - **Token Interaction**: Tap/click on words to see detailed analysis
   - **Furigana Display**: Automatic hiragana readings for kanji compounds
   - **Translation Popup**: Contextual translations and explanations
   - **Grammatical Analysis**: Part-of-speech and grammatical role information
   - **Dictionary Integration**: JMDict offline dictionary lookups

2.3. **Progress Management**
   - Reading progress automatically saved to local storage
   - Bookmark functionality for quick navigation
   - Resume reading from last position

2.4. **Visual Customization**
   - Dark mode toggle for comfortable reading
   - Responsive design adapts to screen size
   - Adjustable text size and spacing

2.5. **Audio Integration**
   - Text-to-speech playback using VOICEVOX engine
   - Word-level timing synchronization for enhanced learning
   - Multiple speaker voice options
   - Audio controls (play, pause, seek, speed adjustment)

### 3. Import Page (Text Processing Interface)
3.1. **File Upload System**
   - Users can upload Japanese text files (.txt format)
   - Drag-and-drop interface for easy file handling
   - File validation and error handling
   - Support for various text encodings

3.2. **Processing Interface**
   - **Sentence-by-Sentence Processing**: Line-by-line text analysis
   - **Batch Processing**: Process multiple sentences efficiently
   - **Real-time Analysis**: Live tokenization and translation
   - **Progress Tracking**: Visual indicators for processing status

3.3. **Advanced Processing Options**
   - **Local vs Remote Processing**: Choose between offline dictionary or AI-enhanced analysis
   - **Verb Merging Configuration**: Customizable compound word and inflection handling
   - **Token Merging Options**: Fine-tune punctuation and auxiliary verb grouping
   - **Context Awareness**: Previous/next sentence context for better translations

3.4. **OpenAI Integration**
   - **Enhanced Translations**: AI-powered contextual translations
   - **Grammatical Explanations**: Detailed explanations of sentence structure
   - **Cultural Context**: Cultural and contextual information for expressions
   - **Batch Analysis**: Efficient processing of multiple sentences

3.5. **Auto-save Functionality**
   - **Real-time Saving**: Automatic preservation of processing progress
   - **Line-level Backup**: Individual sentence processing saved immediately
   - **Recovery System**: Restore processing state after interruption
   - **Export Options**: Save processed books to library with full analysis data

3.6. **Processing Workflow**
   - Upload text file to import queue
   - Configure processing options (local/remote, merging settings)
   - Process sentences individually or in batches
   - Review and edit translations/analysis
   - Save completed book to library with full metadata

### 4. Audio Features (VOICEVOX Integration)
4.1. **Text-to-Speech Generation**
   - High-quality Japanese speech synthesis
   - Multiple speaker voices and styles
   - Configurable speech parameters (speed, pitch, volume)

4.2. **Timing Synchronization**
   - Word-level timing data for synchronized highlighting
   - Mora-based timing extraction from VOICEVOX
   - Visual feedback during audio playback

4.3. **Audio Controls**
   - Play/pause functionality
   - Seek to specific positions
   - Speed adjustment for learning
   - Volume control

## Non-Functional Requirements

### Performance Requirements
- **Page Load Times**: Under 2 seconds for initial load
- **Processing Speed**: Real-time tokenization and analysis
- **Audio Generation**: Speech synthesis within 3 seconds
- **Auto-save**: Background saving without UI blocking
- **Memory Management**: Efficient cleanup of audio resources

### Scalability Requirements
- **File Size Support**: Handle books up to 10MB text files
- **Concurrent Processing**: Multiple sentence processing without blocking
- **Storage Efficiency**: Compressed book format with metadata
- **Database Performance**: Efficient JMDict dictionary queries

### Usability Requirements
- **Mobile-First Design**: Touch-optimized interface for smartphones
- **Responsive Layout**: Adaptive design for all screen sizes
- **Accessibility**: Keyboard navigation and screen reader support
- **Intuitive Interface**: Clear visual hierarchy and user feedback

### Reliability Requirements
- **Data Persistence**: Reliable auto-save and recovery mechanisms
- **Error Handling**: Graceful degradation when services unavailable
- **Offline Capability**: Core functionality works without internet
- **Backup Systems**: Multiple save points to prevent data loss

### Security Requirements
- **API Key Protection**: Secure storage of OpenAI API credentials
- **File Upload Security**: Validation and sanitization of uploaded files
- **Local Storage**: Secure handling of user progress data
- **Privacy Compliance**: No unnecessary data collection or transmission

### Compatibility Requirements
- **Browser Support**: Latest Chrome, Firefox, Safari, Edge
- **Mobile Platforms**: iOS Safari, Android Chrome
- **Node.js Version**: Node.js 18+ for server components
- **External Dependencies**: Compatible with OpenAI API v4, VOICEVOX engine

## Technical Architecture

### Frontend Stack
- **React 18**: Modern component-based UI framework
- **Material-UI**: Consistent design system and components
- **React Router**: Client-side routing and navigation
- **Vite**: Fast development build tool
- **Axios**: HTTP client for API communication

### Backend Stack
- **Node.js**: JavaScript runtime environment
- **Express**: Web application framework
- **Kuromoji**: Japanese morphological analysis
- **JMDict**: Offline Japanese-English dictionary
- **OpenAI API**: AI-powered language processing
- **VOICEVOX**: Japanese text-to-speech synthesis

### Data Storage
- **File System**: Books and imports stored as files
- **JSON Format**: Enhanced book format with full analysis data
- **Local Storage**: Browser-based progress and settings storage
- **LevelDB**: JMDict dictionary database storage

### External Integrations
- **OpenAI GPT-4**: Enhanced translations and contextual analysis
- **VOICEVOX Engine**: High-quality Japanese speech synthesis
- **JMDict Database**: Comprehensive Japanese-English dictionary

## API Specifications

### Core Endpoints
- `POST /api/parse` - Process Japanese text with full morphological analysis
- `POST /api/text-to-speech` - Generate audio with timing synchronization
- `GET /api/books` - Retrieve book library listing
- `GET /api/imports` - List files in import queue

### File Management
- `POST /api/import` - Upload new text file for processing
- `GET /api/import/:filename` - Retrieve import file content and existing analysis
- `POST /api/import/:filename/save` - Save completed book with full metadata
- `POST /api/import/:filename/save-line` - Auto-save individual line processing
- `POST /api/import/:filename/save-sentence` - Auto-save individual sentence processing

### Processing Features
- **Context-Aware Analysis**: Considers surrounding sentences for better translations
- **Flexible Token Merging**: Configurable compound word and inflection handling
- **Hybrid Processing**: Combines offline dictionary with AI enhancements
- **Batch Operations**: Efficient processing of multiple text segments

## Quality Assurance

### Testing Requirements
- **Unit Testing**: Core utility functions and text processing logic
- **Integration Testing**: API endpoints and external service integration
- **User Interface Testing**: Component behavior and user interactions
- **Performance Testing**: Load testing for large files and concurrent users

### Code Quality Standards
- **Maintainability**: Modular architecture with clear separation of concerns
- **Documentation**: Comprehensive inline documentation and API specs
- **Error Handling**: Robust error handling and user feedback
- **Code Style**: Consistent formatting and naming conventions

### Deployment Requirements
- **Environment Configuration**: Flexible configuration for different deployment environments
- **Build Process**: Optimized production builds with asset optimization
- **Monitoring**: Error tracking and performance monitoring
- **Backup Strategy**: Regular backups of processed books and user data

## Future Enhancement Considerations

### Planned Features
- **User Accounts**: Multi-user support with individual libraries
- **Advanced Analytics**: Reading statistics and learning progress tracking
- **Export Options**: PDF generation and other export formats
- **Collaborative Features**: Shared annotations and community translations

### Scalability Improvements
- **Database Migration**: Move from file-based to database storage
- **Caching Layer**: Redis caching for frequently accessed data
- **CDN Integration**: Asset delivery optimization
- **Microservices**: Service separation for better scalability

### Technology Upgrades
- **TypeScript Migration**: Enhanced type safety and developer experience
- **Progressive Web App**: Offline functionality and app-like experience
- **Real-time Collaboration**: WebSocket integration for live collaboration
- **Advanced AI Features**: Custom model training for domain-specific translations

---

*This requirements document reflects the current implementation as of December 2024 and serves as both specification and documentation for the existing system. It should be updated as new features are added or requirements change.*
